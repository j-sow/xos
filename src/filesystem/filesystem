/* vim: set filetype=cpp: */

#ifndef GUARD_FILESYSTEM_H
#define GUARD_FILESYSTEM_H 1

#include <cstdint>

#include <iosfwd>
#include <chrono>
#include <system_error>

#include "path_traits.h"
#include "path.h"
#include "filesystem_error.h"
#include "fs_funcs.h"

namespace filesystem {
inline namespace v1 {

	void swap(path& lhs, path& rhs) noexcept;
	size_t hash_value(const path& p) noexcept;

	bool operator == (const path & lhs, const path & rhs) noexcept;
	bool operator != (const path & lhs, const path & rhs) noexcept;
	bool operator < (const path & lhs, const path & rhs) noexcept;
	bool operator <= (const path & lhs, const path & rhs) noexcept;
	bool operator > (const path & lhs, const path & rhs) noexcept;
	bool operator >= (const path & lhs, const path & rhs) noexcept;

	path & operator / (const path & lhs, const path & rhs);

	template <class charT, class traits>
	std::basic_ostream<charT, traits> &
	operator << (std::basic_ostream<charT, traits> & os, const path & p);
	
	template <class charT, class traits>
	std::basic_istream<charT, traits> &
	operator >> (std::basic_istream<charT, traits> & is, const path & p);

	template <class Source>
	path u8path(const Source & source);

	template <class InputIterator>
	path u8path(InputIterator first, InputIterator last);

#if 0
	enum class directory_options;
	class directory_entry;
	class directory_iterator;
	// enable directory_iterator range-based for statements
	directory_iterator begin(directory_iterator iter) noexcept;
	directory_iterator end(const directory_iterator &) noexcept;
#endif

} /*v1*/
}/*filesystem*/

#endif // GUARD_FILESYSTEM_H
