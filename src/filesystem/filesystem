/* vim: set filetype=cpp: */

#ifndef GUARD_FILESYSTEM_H
#define GUARD_FILESYSTEM_H 1

#include <cstdint>

#include <iosfwd>
#include <chrono>
#include <system_error>

namespace std {
 namespace experimental {
  namespace filesystem {
   inline namespace v1 {

	class path
	{
	 public:
		typedef char value_type;
		typedef std::basic_string<value_type> string_type;
		static constexpr value_type preferred_separator = '/';

		// constructors and destructor
		path() noexcept;
		path(const path& p);
		path(path&& p) noexcept;

		template <class Source>
		 path(const Source& source);
		template <class InputIterator>
		 path(InputIterator first, InputIterator last);
		template <class Source>
		 path(const Source& source, const std::locale& loc);
		template <class InputIterator>
		 path(InputIterator first, InputIterator last, const std::locale& loc);

		~path();

		// assignments
		path& operator=(const path& p);
		path& operator=(path&& p) noexcept;

		template <class Source>
		 path& operator=(const Source& source);
		template <class Source>
		 path& assign(const Source& source);
		template <class InputIterator>
		 path& assign(InputIterator first, InputIterator last);

		// appends
		path& operator/=(const path& p);
		template <class Source>
		 path& operator/=(const Source& source);
		template <class Source>
		 path& append(const Source& source);
		template <class InputIterator>
		 path& append(InputIterator first, InputIterator last);

		// concatenation
		path& operator+=(const path& x);
		path& operator+=(const string_type& x);
		path& operator+=(const value_type* x);
		path& operator+=(value_type x);

		template <class Source>
		 path& operator+=(const Source& x);
		template <class EcharT>
		 path& operator+=(EcharT x);
		template <class Source>
		 path& concat(const Source& x);
		template <class InputIterator>
		 path& concat(InputIterator first, InputIterator last);

		// modifiers
		void clear() noexcept;
		path& make_preferred();
		path& remove_filename();
		path& replace_filename(const path& replacement);
		path& replace_extension(const path& replacement = path());
		void swap(path& rhs) noexcept;

		// native format observers
		const string_type& native() const noexcept;
		const value_type* c_str() const noexcept;
		operator string_type() const;

		template <class EcharT,
		          class traits = std::char_traits<EcharT>,
		          class Allocator = std::allocator<EcharT> >
		 std::basic_string<EcharT, traits, Allocator>
		  string(const Allocator& a = Allocator()) const;

		std::string string() const;
		std::wstring wstring() const;
		std::string u8string() const;
		std::u16string u16string() const;
		std::u32string u32string() const;

		// generic format observers
		template <class EcharT,
		          class traits = std::char_traits<EcharT>,
		          class Allocator = std::allocator<EcharT> >
		 std::basic_string<EcharT, traits, Allocator>
		  generic_string(const Allocator& a = Allocator()) const;
		std::string generic_string() const;
		std::wstring generic_wstring() const;
		std::string generic_u8string() const;
		std::u16string generic_u16string() const;
		std::u32string generic_u32string() const;

		// compare
		int compare(const path& p) const noexcept;
		int compare(const string_type& s) const;
		int compare(const value_type* s) const;

		// decomposition
		path root_name() const;
		path root_directory() const;
		path root_path() const;
		path relative_path() const;
		path parent_path() const;
		path filename() const;
		path stem() const;
		path extension() const;

		// query
		bool empty() const noexcept;
		bool has_root_name() const;
		bool has_root_directory() const;
		bool has_root_path() const;
		bool has_relative_path() const;
		bool has_parent_path() const;
		bool has_filename() const;
		bool has_stem() const;
		bool has_extension() const;
		bool is_absolute() const;
		bool is_relative() const;

		// iterators
		class iterator;
		typedef iterator const_iterator;
		iterator begin() const;
		iterator end() const;

	 private:
		string_type pathname; // exposition only
	};

	void swap(path& lhs, path& rhs) noexcept;
	size_t hash_value(const path& p) noexcept;

	bool operator == (const path & lhs, const path & rhs) noexcept;
	bool operator != (const path & lhs, const path & rhs) noexcept;
	bool operator < (const path & lhs, const path & rhs) noexcept;
	bool operator <= (const path & lhs, const path & rhs) noexcept;
	bool operator > (const path & lhs, const path & rhs) noexcept;
	bool operator >= (const path & lhs, const path & rhs) noexcept;

	path & operator / (const path & lhs, const path & rhs);

	template <class charT, class traits>
	std::basic_ostream<charT, traits> &
	operator << (std::basic_ostream<charT, traits> & os, const path & p);
	
	template <class charT, class traits>
	std::basic_istream<charT, traits> &
	operator >> (std::basic_istream<charT, traits> & is, const path & p);

	template <class Source>
	path u8path(const Source & source);

	template <class InputIterator>
	path u8path(InputIterator first, InputIterator last);

	class filesystem_error;

	class directory_entry;

	class directory_iterator;

	// enable directory_iterator range-based for statements
	directory_iterator begin(directory_iterator iter) noexcept;

	directory_iterator end(const directory_iterator &) noexcept;

	class file_status;

	struct space_info
	{
		uintmax_t capacity;
		uintmax_t free;
		uintmax_t available;
	};

	enum class file_type;
	enum class perms;
	enum class copy_options;
	enum class directory_options;

	typedef std::chrono::time_point<std::chrono::system_clock> file_time_type;

	// operational functions

	path current_path();
	path current_path(std::error_code& ec);
	void current_path(const path& p);
	void current_path(const path& p, std::error_code& ec) noexcept;

	path absolute(const path & p, const path & base = current_path());
	path canonical(const path & p, const path & base, std::error_code & ec);
	path canonical(const path & p, std::error_code & ec);
	path canonical(const path & p, const path & base = current_path());


	void copy(const path & from, const path & to);
	void copy(const path & from, const path & to,
	          std::error_code & ex) noexcept;
	void copy(const path & from, const path & to, copy_options options);
	void copy(const path & from, const path & to, copy_options options,
	          std::error_code & ex) noexcept;

	bool copy_file(const path & from, const path & to);
	bool copy_file(const path & from, const path & to,
	               std::error_code & ec) noexcept;
	bool copy_file(const path & from, const path & to, copy_options options);
	bool copy_file(const path & from, const path & to, copy_options options,
	               std::error_code & ec) noexcept;


	void copy_symlink(const path & existing, const path & newborn);
	void copy_symlink(const path & existing, const path & newborn,
	                  std::error_code & ec) noexcept;

	bool create_directories(const path & p);
	bool create_directories(const path & p, std::error_code& ec) noexcept;

	bool create_directory(const path& p);
	bool create_directory(const path& p, std::error_code& ec) noexcept;

	bool create_directory(const path& p, const path& attributes);
	bool create_directory(const path& p, const path& attributes,
	                      std::error_code& ec) noexcept;

	void create_directory_symlink(const path& to, const path& new_symlink);
	void create_directory_symlink(const path& to, const path& new_symlink,
	                              std::error_code& ec) noexcept;

	void create_hard_link(const path& to, const path& new_hard_link);
	void create_hard_link(const path& to, const path& new_hard_link,
	                      std::error_code& ec) noexcept;

	void create_symlink(const path& to, const path& new_symlink);
	void create_symlink(const path& to, const path& new_symlink,
	                    std::error_code& ec) noexcept;

	bool exists(file_status s) noexcept;
	bool exists(const path& p);
	bool exists(const path& p, std::error_code& ec) noexcept;

	bool equivalent(const path& p1, const path& p2);
	bool equivalent(const path& p1, const path& p2,
	                std::error_code& ec) noexcept;

	uintmax_t file_size(const path& p);
	uintmax_t file_size(const path& p, std::error_code& ec) noexcept;

	uintmax_t hard_link_count(const path& p);
	uintmax_t hard_link_count(const path& p, std::error_code& ec) noexcept;

	bool is_block_file(file_status s) noexcept;
	bool is_block_file(const path& p);
	bool is_block_file(const path& p, std::error_code& ec) noexcept;

	bool is_character_file(file_status s) noexcept;
	bool is_character_file(const path& p);
	bool is_character_file(const path& p, std::error_code& ec) noexcept;

	bool is_directory(file_status s) noexcept;
	bool is_directory(const path& p);
	bool is_directory(const path& p, std::error_code& ec) noexcept;

	bool is_empty(const path& p);
	bool is_empty(const path& p, std::error_code& ec) noexcept;

	bool is_fifo(file_status s) noexcept;
	bool is_fifo(const path& p);
	bool is_fifo(const path& p, std::error_code& ec) noexcept;


	bool is_other(file_status s) noexcept;
	bool is_other(const path& p);
	bool is_other(const path& p, std::error_code& ec) noexcept;

	bool is_regular_file(file_status s) noexcept;
	bool is_regular_file(const path& p);
	bool is_regular_file(const path& p, std::error_code& ec) noexcept;

	bool is_socket(file_status s) noexcept;
	bool is_socket(const path& p);
	bool is_socket(const path& p, std::error_code& ec) noexcept;

	bool is_symlink(file_status s) noexcept;
	bool is_symlink(const path& p);
	bool is_symlink(const path& p, std::error_code& ec) noexcept;


	file_time_type last_write_time(const path& p);
	file_time_type last_write_time(const path& p, std::error_code& ec) noexcept;
	void last_write_time(const path& p, file_time_type new_time);
	void last_write_time(const path& p, file_time_type new_time, std::error_code& ec) noexcept;

	void permissions(const path& p, perms prms);
	void permissions(const path& p, perms prms, std::error_code& ec) noexcept;

	path read_symlink(const path& p);
	path read_symlink(const path& p, std::error_code& ec);

	bool remove(const path& p);
	bool remove(const path& p, std::error_code& ec) noexcept;

	uintmax_t remove_all(const path& p);
	uintmax_t remove_all(const path& p, std::error_code& ec) noexcept;

	void rename(const path& from, const path& to);
	void rename(const path& from, const path& to, std::error_code& ec) noexcept;

	void resize_file(const path& p, uintmax_t size);
	void resize_file(const path& p, uintmax_t size, std::error_code& ec) noexcept;

	space_info space(const path& p);
	space_info space(const path& p, std::error_code& ec) noexcept;

	file_status status(const path& p);
	file_status status(const path& p, std::error_code& ec) noexcept;

	bool status_known(file_status s) noexcept;

	file_status symlink_status(const path& p);
	file_status symlink_status(const path& p, std::error_code& ec) noexcept;

	path system_complete(const path& p);
	path system_complete(const path& p, std::error_code& ec);
	path temp_directory_path();
	path temp_directory_path(std::error_code& ec);

   } /*v1*/
  }/*filesystem*/
 } /*experimental*/
} /*std*/

#endif // GUARD_FILESYSTEM_H
