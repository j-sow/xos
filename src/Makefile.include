######################################################################
# The rest of this is a work in progress, but should not
# need modification
######################################################################
BUILD ?= release

CC             ?= gcc
CXX            ?= g++
LD             ?= ld
OBJCPY         ?= objcopy

BINDIR          = bin
DEPDIR          = .deps
DOCDIR          = doc/html
OBJDIR          = .objs
LIBDIR          = lib
INCLUDEDIR      = $(shell pwd)/include

SUBMAKES = $(shell find $(SUBDIRS) -name Makefile)

$(info SUBMAKES = $(SUBMAKES))

# Put this as the first target encountered
release:

#
#
#
define DIR_TARGETS
  D = $(1)
  $$(D)/$(DEPDIR) $$(D)/$(OBJDIR) $$(D)/$(BINDIR) $$(D)/$(LIBDIR):
	echo $$(Q) $$@
	$$(Q)mkdir -p $$@
endef

####
#
####
define STANDARD_TARGETS
  D = $(1)
  T = $(2)

  $$(info STANDARD_TARGETS - TARGET = $$(T), DIR = $$(D))

  TMP_DEPS = $$($$(T)_OBJS:%o=$$(D)/$(DEPDIR)/%d)

  #
  # Create dependency '.d' file
  #
  $$(D)/$(DEPDIR)/%.d: $$(D)/%.cc | $$(D)/$(DEPDIR)
	$$(QDEP)$$(CXX) -MM -MP -MT '$$(D)/$(OBJDIR)/$$*.o $$@' \
	  $$(CXXFLAGS_release) $$< > $$@

  $$(D)/$(DEPDIR)/%.debug.d: $$(D)/%.cc | $$(D)/$(DEPDIR)
	$$(QDEPDBG)$$(CXX) -MM -MP -MT '$$(D)/$(OBJDIR)/$$*.debug.o $$@' \
	  $$(CXXFLAGS_debug) $$< > $$@

  $$(D)/$(DEPDIR)/%.coverage.d: $$(D)/%.cc | $(D)/$(DEPDIR)
	$$(QDEPCOV)$$(CXX) -MM -MP -MT '$$(D)/$(OBJDIR)/$$*.coverage.o $$@' \
	  $$(CXXFLAGS_coverage) $$< > $$@

  $$(D)/$(DEPDIR)/%.d: $$(D)/%.c | $$(D)/$(DEPDIR)
	$$(QDEP)$$(CC) -MM -MP -MT '$$(D)/$(OBJDIR)/$$*.o $$@' \
	  $$(CFLAGS_release) $$< > $$@

  $$(D)/$(DEPDIR)/%.debug.d: $$(D)/%.c | $$(D)/$(DEPDIR)
	$$(QDEPDBG)$$(CC) -MM -MP -MT '$$(D)/$(OBJDIR)/$$*.debug.o $$@' \
	   $$(CFLAGS_debug) $$< > $$@

  $$(D)/$(DEPDIR)/%.coverage.d: $$(D)/%.c | $$(D)/$(DEPDIR)
	$$(QDEPCOV)$$(CC) -MM -MP -MT '$$(D)/$(OBJDIR)/$$*.coverage.o $$@' \
	  $$(CFLAGS_coverage) $$< > $$@

  #
  # Source unit compilation
  #
  $$(D)/$(OBJDIR)/%.o: $$(D)/%.cc | $$(D)/$(OBJDIR)
	$$(QCXX)$$(CXX) $$(CXXFLAGS_release) -c $$< -o $$@

  $$(D)/$(OBJDIR)/%.debug.o: $$(D)/%.cc | $$(D)/$(OBJDIR)
	$$(QCXXDBG)$$(CXX) $$(CXXFLAGS_debug) -c $$< -o $$@

  $$(D)/$(OBJDIR)/%.coverage.o: $$(D)/%.cc | $$(D)/$(OBJDIR)
	$$(QCXXCOV)$(CXX) $$(CXXFLAGS_coverage) -c $$< -o $$@

  $$(D)/$(OBJDIR)/%.o: $$(D)/%.c | $$(D)/$(OBJDIR)
	$$(QCC)$$(CC) $$(CFLAGS_release) -c $$< -o $$@

  $$(D)/$(OBJDIR)/%.debug.o: $$(D)/%.c | $$(D)/$(OBJDIR)
	$$(QCC)$$(CC) $$(CFLAGS_debug) -c $$< -o $$@

  $$(D)/$(OBJDIR)/%.coverage.o: $$(D)/%.c | $$(D)/$(OBJDIR)
	$$(QCCCOV)$$(CC) $$(CFLAGS_coverage) -c $$< -o $$@

  DEPS := $$(DEPS) $$(TMP_DEPS)
endef

####
#
####
define PROGRAM_TARGETS
  D = $(1)
  T = $(2)

  $$(info PROGRAM_TARGETS - $$(D)/$$(T))

  $$(T)_EXE := $$(D)/$(BINDIR)/$$(T)

  #
  # Place compiled objects in $(OBJDIR)
  #
  $$(T)_OBJS := $$($$(T)_OBJS:%.o=$$(D)/$$(OBJDIR)/%.o)
  $$(info $$(T) OBJECTS: $$($$(T)_OBJS))

  $$(T)_DBG_OBJS = $$($$(T)_OBJS:%.o=%.debug.o)
  $$(info $$(T) DBG OBJECTS: $$($$(T)_DBG_OBJS))

  $$(T)_COV_OBJS = $$($$(T)_OBJS:%.o=%.coverage.o)
  $$(info $$(T) COV OBJECTS: $$($$(T)_COV_OBJS))

  $$(T)_LIBSFIRST := $$($$(T)_LIBDEPS:%=$(LIBDIR)/lib%.a)
  $$(T)_LIBDEPFLAGS := $$($$(T)_LIBDEPS:%=-l%)

  $$(D)/$$(T): $$($$(T)_EXE)
  $$(D)/$$(T).debug: $$($$(T)_EXE).debug
  $$(D)/$$(T).coverage: $$($$(T)_EXE).coverage

  .PHONY: $$(D)/$$(T) $$(D)/$$(T).debug $$(D)/$$(T).coverage

  #
  # Link the release build, then strip it, preserving debug symbols in
  # $(target).symbols
  #
  $$($$(T)_EXE): $$($$(T)_OBJS) $$($$(T)_LIBSFIRST) | $$(D)/$$(BINDIR)
	$$(QLINK)$$(CXX) $$(CXXFLAGS_release) -o $$@ $$($$(T)_OBJS) \
		$$(LDFLAGS_release) $$(LIBS_release) -L $(LIBDIR) $$(LIBDEPFLAGS)
	$$(QSYM)$$(OBJCPY) --only-keep-debug $$@ $$@.symbols
	$$(QSTRIP)$$(OBJCPY) --strip-all $$@
	$$(QLNKSYM)$$(OBJCPY) --add-gnu-debuglink $$@.symbols $$@
	$$(Q)chmod 644 $$@.symbols

  # Debug
  $$($$(T)_EXE).debug: $$($$(T)_DBG_OBJS) | $$(D)/$$(BINDIR)
	$$(QLINKDBG)$$(CXX) $$(CXXFLAGS_debug) -o $$@ \
		$$^ $$(LDFLAGS_debug) $$(LIBS_debug)

  # Coverage
  $$($$(T)_EXE).coverage: $$($$(T)_COV_OBJS) | $$(D)/$$(BINDIR)
	$$(QLINKCOV)$$(CXX) $$(CXXFLAGS_coverage) -o $$@ \
		$$^ $$(LDFLAGS_coverage) $$(LIBS_coverage)

$$(info )
$$(info $(BINDIR)/$$(T) $$($$(T)_EXE))
$$(info )
  $(BINDIR)/$$(T): $$($$(T)_EXE) | $(BINDIR)
	echo "XXXXXXXX $$@"
	rm -f $$@
	ln $$($$(T)_EXE) $$@
endef

define LIBRARY_TARGETS
  D = $(1)
  T = $(2)

  $$(info LIBRARY_TARGETS - $$(D)/$$(T))

  STATIC_NAME := $$(T)_STATIC_LIB
  #
  # We need this to eat the whitespace in the parameter expansion
  #
  $$(STATIC_NAME) := $$(D)/$$(LIBDIR)/$$(T).a
  DBG_STATIC_LIB := $$(D)/$$(LIBDIR)/$$(T).debug.a
  COV_STATIC_LIB := $$(D)/$$(LIBDIR)/$$(T).coverage.a

  $$(info ==>>==>> $$($$(T)_STATIC_LIB))

  #
  # Library objects to build
  #
  $$(T)_OBJS := $$($$(T)_OBJS:%.o=$$(D)/$$(OBJDIR)/%.o)
  $$(T)_DBG_OBJS = $$($$(T)_OBJS:%.o=%.debug.o)
  $$(T)_COV_OBJS = $$($$(T)_OBJS:%.o=%.coverage.o)

  $$(D)/$$(T): $$($$(T)_STATIC_LIB)
  $$(D)/$$(T).debug: $$(DBG_STATIC_LIB)
  $$(D)/$$(T).coverage: $$(COV_STATIC_LIB)

  $$($$(T)_STATIC_LIB): $$($$(T)_OBJS) | $$(D)/$$(LIBDIR)
	$$(QAR)ar -cSurv $$@ $$^
	$$(QRANLIB)ranlib $$@
	@if [ -n "$$(DESTDIR)" ]; then \
		mkdir -p $$(DESTDIR)/lib; \
	    cp -v $$@ $$(DESTDIR)/lib; \
	fi

  # Debug
  $$(DBG_STATIC_LIB): $$($$(T)_DBG_OBJS) | $$(D)/$$(LIBDIR)
	$$(QAR)ar -cSurv $$@ $$^
	$$(QRANLIB)ranlib $$@
	@if [ -n "$$(DESTDIR)" ]; then \
		mkdir -p $$(DESTDIR)/lib; \
	    cp -v $$@ $$(DESTDIR)/lib; \
	fi

  # Coverage
  $$(COV_STATIC_LIB): $$($$(T)_COV_OBJS) | $$(D)/$$(LIBDIR)
	$$(QAR)ar -cSurv $$@ $$^
	$$(QRANLIB)ranlib $$@
	@if [ -n "$$(DESTDIR)" ]; then \
		mkdir -p $$(DESTDIR)/lib; \
	    cp -v $$@ $$(DESTDIR)/lib; \
	fi

$$(info >>>>>>>>>>>>>>>> $$(LIBDIR)/$$(T) $$($$(T)_STATIC_LIB))
$$(info >>> $$(T))
$$(info ln $$($$($$(T)_STATIC_LIB)) $$@)
  $$(LIBDIR)/$$(T).a: $$($$(T)_STATIC_LIB) | $$(LIBDIR)
	echo STATIC_NAME = $$($$(STATIC_NAME))
	rm -f $$@
	ln $$($$(STATIC_NAME)) $$@
endef

####
#
####
define INCLUDE_SUBMAKE
  MF = $(1)

  OLD_TARGETS := $$(TARGETS)
  OLD_LIB_TARGETS := $$(LIB_TARGETS)

  TARGETS =
  LIB_TARGETS =

  include $$(MF)

  DIR = $$(shell dirname $$(MF))

  $$(eval $$(call DIR_TARGETS, $$(DIR)))

  $$(foreach T, $$(TARGETS) $$(LIB_TARGETS), \
     $$(eval $$(call STANDARD_TARGETS, $$(DIR), $$(T))))

  $$(foreach T, $$(TARGETS), \
    $$(eval $$(call PROGRAM_TARGETS, $$(DIR), $$(T))))

  $$(foreach T, $$(LIB_TARGETS), \
    $$(eval $$(call LIBRARY_TARGETS, $$(DIR), $$(T))))

  TARGETS := $$(TARGETS:%=$$(D)/%)
  TARGETS := $$(TARGETS) $$(OLD_TARGETS)
  LIB_TARGETS := $$(LIB_TARGETS:%=$$(D)/%)
  LIB_TARGETS := $$(LIB_TARGETS) $$(OLD_LIB_TARGETS)
endef

$(foreach SM, $(SUBMAKES),$(eval $(call INCLUDE_SUBMAKE, $(SM))))

DBG_TARGETS     = $(TARGETS:%=%.debug)
DBG_LIB_TARGETS = $(LIB_TARGETS:%=%.debug)

COV_TARGETS     = $(TARGETS:%=%.coverage)
COV_LIB_TARGETS = $(LIB_TARGETS:%=%.coverage)

#$(foreach T, $(TARGETS), $(eval $(call STANDARD_TARGETS, $(T))))

#
# Print out our settings
#
WS = $(BLANK) $(BLANK)

#$(info $(WS) INCLUDES_base = '$(INCLUDES_base)')
#$(info $(WS)  DEFINES_base = '$(DEFINES_base)')
#$(info $(WS)   CFLAGS_base = '$(CFLAGS_base)')
#$(info $(WS) CXXFLAGS_base = '$(CXXFLAGS_base)')
#$(info $(WS)  LDFLAGS_base = '$(LDFLAGS_base)')
#$(info $(WS)     LIBS_base = '$(LIBS_base)')

#
# Cute stuff to beautify make output - use 'make V=1' to see command output
#
V           ?= 0
Q_0          = @
Q            = $(Q_$(V))
QDEP_0       = @echo "       DEP" $<;
QDEP         = $(QDEP_$(V))

QCC_0        = @echo "        CC" $<;
QCC          = $(QCC_$(V))
QCXX_0       = @echo "       CXX" $<;
QCXX         = $(QCXX_$(V))
QLINK_0      = @echo "      LINK" $@;
QLINK        = $(QLINK_$(V))
QSYM_0       = @echo "       SYM" $@;
QSYM         = $(QSYM_$(V))
QSTRIP_0     = @echo "     STRIP" $@;
QSTRIP       = $(QSTRIP_$(V))
QLNKSYM_0    = @echo "    LNKSYM" $@;
QLNKSYM      = $(QLNKSYM_$(V))
QAR_0        = @echo "        AR" $@;
QAR          = $(QAR_$(V))
QRANLIB_0    = @echo "    RANLIB" $@;
QRANLIB      = $(QRANLIB_$(V))


QDEPDBG_0    = @echo "       DEP $< [debug]";
QDEPDBG      = $(QDEPDBG_$(V))
QCCDBG_0     = @echo "        CC $< [debug]";
QCCDBG       = $(QCCDBG_$(V))
QCXXDBG_0    = @echo "       CXX $< [debug]";
QCXXDBG      = $(QCXXDBG_$(V))
QLINKDBG_0   = @echo "      LINK $@ [debug]";
QLINKDBG     = $(QLINKDBG_$(V))

QDEPCOV_0    = @echo "       DEP $< [coverage]";
QDEPCOV      = $(QDEPCOV_$(V))
QCCCOV_0     = @echo "        CC $< [coverage]";
QCCCOV       = $(QCCCOV_$(V))
QCXXCOV_0    = @echo "       CXX $< [coverage]";
QCXXCOV      = $(QCXXCOV_$(V))
QLINKCOV_0   = @echo "      LINK $@ [coverage]";
QLINKCOV     = $(QLINKCOV_$(V))

HIDEOUTPUT_0 = "/dev/null"
HIDEOUTPUT_1 = "/dev/stdout"
HIDEOUTPUT   = $(HIDEOUTPUT_$(V))

######################################################################
# Auto-rules
######################################################################

$(info TARGETING $(TARGETS) $(LIB_TARGETS))

$(BINDIR) $(LIBDIR):
	$(Q)mkdir -p $@

#
# TARGETS
#
release: $(LIB_TARGETS) $(TARGETS)

debug: $(DBG_LIB_TARGETS) $(DBG_TARGETS)

coverage: $(COV_LIB_TARGETS) $(COV_TARGETS)

all: release debug coverage


#.PHONY: all release debug coverage subdirs libs

################################################################################
ifdef $(DEAD) #################################################################
################################################################################
check: release

debug-check: debug

coverage-check: coverage 

coverage.info:
	$(MAKE) coverage-check
	lcov --no-external --capture --directory . --output-file $@ > /dev/null

covreport: coverage.info
	rm -rf coverage-report
	genhtml $< --quiet --frames --show-details --demangle-cpp \
	           --legend --output-directory coverage-report --num-spaces=4
	chromium-browser coverage-report/index.html


tags: subdirs
	ctags -R .

docs: $(DOCDIR)

$(DOCDIR): doc/Doxyfile $(shell find . -name '*.cc' -o -name '*.h')
	rm -rf $@
	$(Q)mkdir -p $@
	doxygen doc/Doxyfile

endif #########################################################################

codecount:
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "     Headers: %' 7d\n" \
		$$(find . -name '*.h' | \
		   xargs wc -l | tail -1 | sed -e 's/total//g')
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "      Source: %' 7d\n" \
		$$(find . -name '*.cc' -o -name '*.c' | \
		   xargs wc -l | tail -1 | sed -e 's/total//g')
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "Total Source: %' 7d\n" \
		$$(find . -name '*.cc' -o -name '*.c' -o -name '*.h' | \
		   xargs wc -l | tail -1 | sed -e 's/total//g')
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "       Build: %' 7d\n" \
		$$(find . -name 'Makefile*' \
		   | xargs wc -l | tail -1 | sed -e 's/total//g')
clean:
	@for dir in $(SUBDIRS); do \
	  rm -vrf $${dir}/$(OBJDIR) $${dir}/$(LIBDIR) $${dir}/$(BINDIR) \
	    $${dir}/*.info $${dir}/core $${dir}/core.[0123456789]* \
	    $${dir}/a.out $${dir}/*.symbols; \
	done

docclean:
	rm -rf $(DOCDIR)

realclean: clean docclean
	@for dir in $(SUBDIRS); do \
	  rm -vrf $${dir}/$(DEPDIR) $${dir}/.ycm_extra_conf.pyc \
	    $${dir}/config.cache tags $${dir}/coverage-report; \
	done


#$(info ---> $(DEPS))

ifneq ($(MAKECMDGOALS), clean)
 ifneq ($(MAKECMDGOALS), docclean)
  ifneq ($(MAKECMDGOALS), realclean)
   -include $(DEPS)
  endif
 endif
endif

